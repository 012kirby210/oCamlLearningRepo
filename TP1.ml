(* Question 1*)
print_endline "Question 1 : ";;
let x = "3 + 7;; est une expression arithmétique évaluée en tant qu'entier valant 10";;
print_endline x ;;
let x = "3. + 7.5;; est une expression arithmétique évaluée en tant que float valant 10.5";;
print_endline x;;
let x = "\"bonjour\" = \"Bonjour\";; est une expression comparative évaluée en tant que booléen valant false";;
print_endline x;;
let x = "\"bonjour\" < \"salut\";; est une expression comparative évaluée en tant que booléen valant true en vertu de l'ordre lexicographique";;
print_endline x;;
let x = "succ 4;; est une expression évaluant(le résultat de la fonction succ prenant un entier et renvoyant un entier) un entier valant 5";;
print_endline x;;
let x = "(succ 4)*5;; est une expression évaluant le produit entre deux entiers (un entier donc), en vertu de l'expression évaluée entre parenthèse s'évaluant comme précédemment mentionnée, valant 25";;
print_endline x;;
let x = "succ 4 * 5;; est une expression qui s'évalue de la même façon que précédemment en vertu de la précédence de l'évaluation de la fonction succ";;
print_endline x;;
let x = "succ (4*5);; est une expression qui s'évalue comme entier valant 21";;
print_endline x;;
let x = "succ(succ 5) + 3;; est une expression qui s'évalue comme un entier valant 10";;
print_endline x;;
let x = "Char.lowercase 'A';; est une expression qui s'évalue comme un char valant a";;
print_endline x;;
let x = "Char.code(Char.lowercase 'A');; est une expression qui s'évalue comme un entier valant 97";;
print_endline x;;
let x = "Char.chr(Char.code(Char.lowercase 'A') +1);; est une expression qui s'évalue comme un char valant b";;
print_endline x;;
let x = "if 4=5 then succ 3 else succ 4;; est une expression conditionelle s'évaluant comme un entier valant 5";;
print_endline x;;
let x ="(if 4=5 then succ 3 else succ 4) +2;; est une expression arithmetique s'évaluant comme la somme de deux entiers valant 7, le premier évalué comme expression conditionelle";;
print_endline x;;
(* ligne 46 de l'énoncé : erreur dans la correction*)
let x = "succ (if 4=5 then succ 3 else succ 4);; est une expression s'évaluant en tant qu'appel de fonction comme un entier valant 6";;
print_endline x;;
let x = "(if 4=5 then succ 3 else succ 4) = 6;; est une expression comparative s'évaluant comme un booléen valant false";;
print_endline x;;
let x = "( ( if 4 >= 4 then succ 3 else succ 4 ) > 6 ) = ( ’ a ’ > ’ b ’ );; est une expression comparative s'évaluant comme un booléen valant true";;
print_endline x;;
let x = "let a = 3 in (a>3) = (a<3);; est une expression comparative s'évaluant comme un booléen valant true";;
print_endline x;;
let x ="(let a = 3 in (a+3))*4;; est une expression arithmétique s'évaluant comme un entier valant 24";;
print_endline x;;
let x = "succ (let a = 3 in (a+3));; est une expression (appel de fonction) s'évaluant comme un entier valant 7";;
print_endline x;;
(* Question 2*)
print_endline  "Question 2 : ";;
print_endline "2 + 3.0;; est une expression qui ne peut être évaluée car l'opérateur + induit un type inféré entier procédant de deux entiers mais un des deux types est un flottant.";;
print_endline "succ 3.0;; est un appel de fonction qui ne peut être évalué car la fonction succ s'applique sur un entier et pas un flottant";;
print_endline "1 < 1.5;; est une comparaison entre deux types différents et par définition de la séparation des types non comparables";;
print_endline "if 4=4 then 1 else true;; est une expression conditionelle dont le type ne peut être inféré puisqu'il dépend de la condition (un coup un entier, un coup un booléen)";;
print_endline "succ 3 4;; ne peut être évalué car le compilateur est en panique : la fonction succ s'évalue comme int -> int, laissant le compilateur dans un état non déterminé ( quid du deuxième argument, est-ce un deuxième argument si non ou est l'opérateur ?) [ cf LR1 grammar]";;
print_endline "Exercice 2";;
print_endline "let x = 2 in x+3;; est une expression utilisant une déclaration locale.";;
print_endline "x+3;; ne peut s'évaluer puisque x n'existe pas dans le top level system";;
print_endline "(let x=2 in x+3) + (let z=4 in z);; est une expression arithmétique utilisant deux déclaration locale";;
print_endline "(let x=2 in x+3) + (let z=4 in z+x);; ne peut être évalué car x n'est pas défini dans l'expression z+x";;
print_endline "let x= let y=3 in y;; est une déclaration";;
print_endline "x;; s'évalue naturellement à let y = 3 in y et donc à 3";;
print_endline "let cube x = x*x*x;; est  la déclaratin d'une fonction à un argument entier s'évaluant comme un entier";;
print_endline "let double_cube x = 2 *(cube x);; est la déclaration d'une fonction à un argument entier s'évaluant comme le produit d'entiers";;
print_endline "Exercice 3";;
print_endline "String.length \"Bonjour\" -1;; [ - : int = 6]";;
print_endline "(String.length \"Bonjour\") -1;; [ - : int = 6]";;
print_endline "String.length (\"Bonjour\" -1 );; [erreur : l'évaluation ( string - int ) ne fonctionne pas ]";;
print_endline "let moyenne x y = (x+.y) /. 2.;; [ float -> float -> float = <func> ]";;
print_endline "moyenne 4.0 6.;; [ - : float = 5.]";;
print_endline "moyenne (4. 6.);; [erreur : l'évaluation ( float float ) ne procède d'aucune sémantique]";;
print_endline "let test x = if x>0 then 1 else \"1\";; [erreur : le type de l'expression ne peut être inféré]";;
print_endline "let f x = not x;; [ bool -> bool = <func>]";;
print_endline "f not true;; [ erreur : panique compilation ]";;
print_endline "f (not true);; [ - : bool = true ]";;
